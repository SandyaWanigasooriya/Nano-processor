entity TB_Mux_8_Way_Double is
--  Port ( );
end TB_Mux_8_Way_Double;

architecture Behavioral of TB_Mux_8_Way_Double is

component Mux_8_Way_Double is
    Port ( r0 : in STD_LOGIC_VECTOR (3 downto 0);
           r1 : in STD_LOGIC_VECTOR (3 downto 0);
           r2 : in STD_LOGIC_VECTOR (3 downto 0);
           r3 : in STD_LOGIC_VECTOR (3 downto 0);
           r4 : in STD_LOGIC_VECTOR (3 downto 0);
           r5 : in STD_LOGIC_VECTOR (3 downto 0);
           r6 : in STD_LOGIC_VECTOR (3 downto 0);
           r7 : in STD_LOGIC_VECTOR (3 downto 0);
           oa : out STD_LOGIC_VECTOR (3 downto 0);
           ob : out STD_LOGIC_VECTOR (3 downto 0);
           sa : in STD_LOGIC_VECTOR (2 downto 0);
           sb : in STD_LOGIC_VECTOR (2 downto 0));
end component;

signal r0, r1, r2, r3, r4, r5, r6, r7, oa, ob : STD_LOGIC_VECTOR (3 downto 0);
signal sa, sb : STD_LOGIC_VECTOR (2 downto 0);

begin

mux_8_way_double_1: Mux_8_Way_Double port map(
    r0=>r0,
    r1=>r1,
    r2=>r2,
    r3=>r3,
    r4=>r4,
    r5=>r5,
    r6=>r6,
    r7=>r7,
    oa=>oa,
    ob=>ob,
    sa=>sa,
    sb=>sb);
    
PROCESS
    BEGIN
    r0<="1100";
    r1<="1111";
    r2<="1011";
    r3<="0111";
    r4<="1101";
    r5<="1001";
    r6<="0100";
    r7<="0111";
    
    sa<="001";    
    sb<="010";
    wait for 20ns;
    sa<="010";
    sb<="100";
    wait for 20ns;
    sa<="100";
    sb<="000";
    wait;
END PROCESS;

end Behavioral;
